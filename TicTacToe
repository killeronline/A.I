using System;
using System.Text;
using System.Collections.Generic;

namespace ConsoleApplication5
{
    #region Constants
    class Players
    {
        public static int Empty = 0;
        public static int WhitePlayer = 1;
        public static int BlackPlayer = 2;
    }

    class Pieces
    {
        public static int Empty = 0;
        public static int White = 1;
        public static int Black = 2;        
    }        
    #endregion

    public class Program
    {   
        public struct Transaction
        {
            public Transaction( int _r , int _c , Cell _current )
            {                
                r = _r;
                c = _c;
                old = new Cell();
                current = _current;
            }            
            public int r;
            public int c;
            public Cell old;
            public Cell current;
        }
		public static Cell[,] grid ;
        public static Move Best_Move;                
        public static int PID ;                
        public static List<string> vdata = new List<string>();
        public static void Perform(Move m)
        {
            foreach (Transaction t in m.steps)
            {
                ExecuteStep(t);
            }
        }
        public static void ExecuteStep(Transaction t)
        {
            t.old = grid[t.r, t.c];
            grid[t.r, t.c] = t.current;
        }
        public static void UnExecute(Move m)
        {
            foreach (Transaction t in m.steps)
            {
                UnExecuteStep(t);
            }
        }
        public static void UnExecuteStep(Transaction t)
        {
            grid[t.r, t.c] = t.old;
        }
        public static void Main(string[] args)
        {

            if (manual)
            {
                First_Board();
                Print_Board();
                PID = 1;
            }
            else
            {
                TakeInputs();
                file = false;
            }
            int T = 0;
            while (T < 100)
            {
                if (file)
                {
                    vdata.Clear();
                }
                g(0);
                Print_Move(Best_Move);
                if (manual)
                {
                    Execute(ref Best_Move);
                    Print_Board();
                }
                if (file)
                {
                    System.IO.File.WriteAllLines(@"C:\Users\Administrator\Desktop\TTTAI\WriteLines.xml", vdata.ToArray());
                }
                if (manual)
                {
                    if (!Get_User_Move())
                    {
                        break;
                    }
                }
                else
                {
                    Console.ReadLine();// Trim this for flush output
                    break;
                }
            }
        }

        public struct Cell
        {
            public Cell(int _piece)
            {
                piece = _piece;
            }
            public int piece;            
        };
        public struct Move
        {
            public int p;
            public int r;
            public int c;
            public int v;
            public List<Transaction> steps;
        };
        public static bool file = false;
        public static bool manual = true;
        public static int Depth = 3;
        public static int Sentinel = 999;

        public static void First_Board()
        {
            grid = new Cell[3, 3];
        }

        public static void TakeInputs()
        {            
            grid = new Cell[3, 3];
            for (int i = 0; i < 3; i++)
            {
                string[] line = Console.ReadLine().Trim().Split();
                for (int j = 0; j < line.Length; j++)
                {

                    if (line[j] == "0")
                    {
                        grid[i, j].piece = Pieces.Empty;
                    }
                    else if (line[j] == "1")
                    {
                        grid[i, j].piece = Pieces.White;
                    }
                    else if (line[j] == "2")
                    {
                        grid[i, j].piece = Pieces.Black;
                    }
                    else
                    {
                        Console.WriteLine("Invalid Input");
                        return;
                    }
                }
            }
            string pline = Console.ReadLine().Trim();
            if (pline == "1")
            {
                PID = Players.WhitePlayer;
            }
            else if (pline == "2")
            {
                PID = Players.BlackPlayer;
            }
            else
            {
                Console.WriteLine("Invalid Input");
                return;
            }            
        }

        public static bool Get_User_Move()
        {
            string line = Console.ReadLine().Trim();
            if (!String.IsNullOrEmpty(line))
            {
                string[] inp = line.Split();
                grid[Int32.Parse(inp[0]), Int32.Parse(inp[1])].piece = 2;// MySelf
                return true;
            }
            else
            {
                return false;
            }
        }

        public static void Print_Move( Move _choice )
        {
            Console.WriteLine("Computer Move:{0} {1}",_choice.r ,_choice.c);            
        }

        public static void Print_Board()
        {
            Console.WriteLine();
            for (int i = 0; i < 3; i++)
            {
                Console.WriteLine("{0} {1} {2}", grid[i, 0].piece, grid[i, 1].piece, grid[i, 2].piece);
            }
            Console.WriteLine();
        }        

        public static void visualize( int lvl , int begin , int _mr)
        {
            StringBuilder s = new StringBuilder();
            int tabspaces = 8;
            for (int i = 0; i < lvl * tabspaces; i++)
            {
                s.Append(' ');
            }
            if (begin == 1)
            {                
                vdata.Add(String.Format("{0} LvL{1}", s, lvl));
                               
                for (int i = 0; i < 3; i++)
                {
                    vdata.Add(String.Format("{0} {1} {2} {3}", s, grid[i, 0].piece, grid[i, 1].piece, grid[i, 2].piece));
                }

                vdata.Add(String.Format("{0} <N>", s));
            }
            else
            {
                vdata.Add(String.Format("{0} </N>", s));
                vdata.Add(String.Format("{0} MR:{1}", s,_mr));
            }
        }

        public static int g(int LeveL)
        {
            if (file)
            {
                visualize(LeveL, 1, -1);
            }

            int _pid = LeveL % 2 == 0 ? PID : (PID == 1 ? 2 : 1);

            List<Move> Valid_Moves = Generate_Valid_Moves(_pid);
            
            Valid_Moves.Sort((x, y) => (x.v > y.v ? -1 : x.v < y.v ? 1 : 0));

            int master_return ;

            if (Valid_Moves.Count > 0)
            {
                if (LeveL % 2 == 0)
                {
                    master_return = Int32.MinValue;
                }
                else
                {
                    master_return = Int32.MaxValue;
                }
                foreach (Move m in Valid_Moves)
                {                    
                    if (m.v == Sentinel)
                    {
                        if (LeveL % 2 == 0)
                        {
                            master_return = m.v;
                        }
                        else
                        {
                            master_return = -Sentinel;
                        }
                        if (LeveL == 0)
                        {
                            Best_Move = m;
                        }                        
                        break; 
                    }

                    if (LeveL < 2 * Depth)
                    {
                        Perform(m);

                        int tilda = g(LeveL + 1);// Perception

                        UnExecute(m);

                        if (LeveL % 2 == 0)
                        {
                            if (tilda > master_return)
                            {
                                master_return = tilda;

                                if ( LeveL == 0)
                                {
                                    Best_Move = m;
                                }

                                if (tilda == Sentinel)
                                {
                                    break;
                                }
                            }
                        }
                        else
                        {
                            if (tilda < master_return)
                            {
                                master_return = tilda;
                            }
                        }
                    }
                    else // Leaf Nodes
                    {
                        if (m.v > master_return)
                        {
                            master_return = m.v;

                            if (Depth == 0)
                            {
                                Best_Move = m;
                            }
                        }
                    }                                                      
                }
            }
            else
            {
                master_return = 0;// No Move Scenario : End Nodes ( -Sentinel if no move is a defeat or 0 if no move is draw )
            }
            if (file)
            {
                visualize(LeveL, 0, master_return);
            }
            return master_return ;
        }

        public static int h(int pid)
        {
            int s = 0 ; 

            for (int i = 0; i < 3; i++)// Any Row
            {
                int r = p(i, 0, pid) + p(i, 1, pid) + p(i, 2, pid);
                if ( r == 3)
                {
                    return Sentinel;
                }
                else if ( r > 0 )
                {
                    s++;
                }                
            }

            for (int i = 0; i < 3; i++)// Any Column
            {
                int c = p(0, i, pid) + p(1, i, pid) + p(2, i, pid);
                if (c == 3)
                {
                    return Sentinel;
                }
                else if ( c > 0 )
                {
                    s++;
                }
            }

            int fd = p(0, 0, pid) + p(1, 1, pid) + p(2, 2, pid);
            if ( fd == 3)// Backward Diagonal
            {
                return Sentinel;
            }
            else if ( fd > 0 )
            {
                s++;
            }

            int bd = p(0, 2, pid) + p(1, 1, pid) + p(2, 0, pid);
            if (bd == 3)// Forward Diagonal
            {
                return Sentinel;
            }
            else if( bd > 0 )
            {
                s++;
            }

            return s;
        }

        public static int p( int i , int j , int w )
        {
            return grid[i, j].piece == w ? 1 : grid[i, j].piece == 0 ? 0 : -9;
        }

        public static List<Move> Generate_Valid_Moves( int pid )
        {
            List<Move> Possible_Moves = new List<Move>();

            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (grid[i, j].piece == 0)// Valid Move
                    {
                        Move m = new Move();
                        m.p = pid;
                        m.r = i;
                        m.c = j;

                        Execute(ref m);

                        m.v = h(pid);

                        UnExecute(m);

                        Possible_Moves.Add(m);
                    }
                }
            }

            return Possible_Moves;
        }

        public static void Execute(ref Move m)
        {            
            m.steps = new List<Transaction>();
            m.steps.Add( new Transaction( m.r, m.c , new Cell(m.p) ) );
            Perform(m);
        } 

    }
}
