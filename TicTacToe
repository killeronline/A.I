using System; 
using System.Numerics;
class MyClass {
	static int PID = 0 ;
	static int BEST_SCORE = 0 ;
	static int BEST_X = 0 ;
	static int BEST_Y = 0 ;
	static void h( int s , int i , int j )
	{
		if ( s > BEST_SCORE )
		{
			BEST_SCORE = s ;
			BEST_X = i ;
			BEST_Y = j ;
		}
	}
	static int c( int x , int p )
	{
		if ( x == p )
		{
			return 1 ;
		}
		else if ( x == 0 )
		{
			return 0 ;
		}
		else
		{
			return -1;
		}
	}
    static void Main(string[] args) {
        #region Inputs
        int[,] arr2 = new int[3,3];
        string[] line1 = Console.ReadLine().Trim().Split(' ');
        arr2[0,0] = Int32.Parse( line1[0] );
        arr2[0,1] = Int32.Parse( line1[1] );
        arr2[0,2] = Int32.Parse( line1[2] );
        string[] line2 = Console.ReadLine().Trim().Split(' ');
        arr2[1,0] = Int32.Parse( line2[0] );
        arr2[1,1] = Int32.Parse( line2[1] );
        arr2[1,2] = Int32.Parse( line2[2] );
        string[] line3 = Console.ReadLine().Trim().Split(' ');
        arr2[2,0] = Int32.Parse( line3[0] );
        arr2[2,1] = Int32.Parse( line3[1] );
        arr2[2,2] = Int32.Parse( line3[2] );
		PID = Int32.Parse(Console.ReadLine().Trim());
		#endregion
        // arr , pid
        BEST_SCORE = 0 ;
        BEST_X = 0 ;
        BEST_Y = 0 ;
        
        
        int[] test = ht( ref arr2 , PID );
        BEST_X = test[1];
        BEST_Y = test[2];
        if ( test[0] == 999 )
        {
        	// we win
        }
        else
        {
        	arr2[ BEST_X , BEST_Y ] = PID ; 
        	int[] test2 = ht( ref arr2 , PID==1?2:1 );
        	if ( test2[0] == 999 )
        	{
        		// this should be in a decision tree
        	}
        	else
        	{
        		//proceed
        	}
        }
        
        
        Console.WriteLine( BEST_Y + " " + BEST_X );
        
    }
    static int[] ht( ref int[,] arr , int p )
    {
    	int max_score = -999 ;
    	int max_i = 0 ;
    	int max_j = 0 ;
    	int occupiedCells = 0 ;
    	for ( int i = 0 ; i < 3 ; i++ )
        {
        	for ( int j = 0 ; j < 3 ; j++ )
        	{
        		if ( arr[i,j] == 0 )
        		{
    				arr[i,j] = p ;
    				int score = 0 ;
    				
    				for ( int k = 0 ; k < 3 ; k++ )
    				{
    					int rowSums = c(arr[k,0],p) + c(arr[k,1],p) + c(arr[k,2],p) ;
    					if (  rowSums == 3 )
    					{
    						return new int[]{ 999 , i , j };
    					}
    					else
    					{
    						score += rowSums ;
    					}
    				}
    				
    				for ( int k = 0 ; k < 3 ; k++ )
    				{
    					int colSums = c(arr[0,k],p) + c(arr[1,k],p) + c(arr[2,k],p) ;
    					if (  colSums == 3 )
    					{
    						return new int[]{ 999 , i , j };
    					}
    					else
    					{
    						score += colSums ;
    					}
    				}
    				
    				int LeftDiag = c(arr[0,0],p) + c(arr[1,1],p) + c(arr[2,2],p) ;
    				if ( LeftDiag == 3 )
    				{
    					return new int[]{ 999 , i , j };
    				}
    				else
    				{
    					score += LeftDiag ;
    				}
    				
    				int RightDiag = c(arr[0,2],p) + c(arr[1,1],p) + c(arr[2,0],p) ;
    				if ( RightDiag == 3 )
    				{
    					return new int[]{ 999 , i , j };
    				}
    				else
    				{
    					score += RightDiag ;
    				}
    				
    				if ( score > max_score )
    				{
    					max_score = score ;
    					max_i = i ;
    					max_j = j ;
    				}
    				
    				arr[i,j] = 0 ;
        		}
        		else
        		{
        			occupiedCells++ ;
        		}
        	}
        }
        if ( occupiedCells == 9 )
        {
        	return new int[]{ 0 , 0 , 0 };
        }
        else
        {
        	return new int[]{ max_score , max_i , max_j };
        }
    }
}
